// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Builder Generator should generate builders for empty type 1`] = `
"export * from './SimpleExampleBuilder';
"
`;

exports[`Builder Generator should generate builders for empty type 2`] = `
"/* eslint-disable */
import { DeepPartial } from 'ts-essentials';
import * as SchemaTypes from './ignoreEmptyTypes';
import { cloneDeep } from 'lodash';

export class SimpleExampleBuilder {
  constructor(private readonly obj = {} as DeepPartial<SchemaTypes.SimpleExample>) {
  }

  public withProp1<P extends boolean>(val: P): SimpleExampleBuilder {
    this.obj.prop1 = val;
    return this;
  }

  public withProp2<P extends number>(val: P): SimpleExampleBuilder {
    this.obj.prop2 = val;
    return this;
  }

  public withProp3<P extends DeepPartial<{ innerProp: string; }>>(val: P): SimpleExampleBuilder {
    this.obj.prop3 = val;
    return this;
  }

  public withEmpty<P extends DeepPartial<SchemaTypes.EmptyInterface>>(val: P): SimpleExampleBuilder {
    this.obj.empty = val;
    return this;
  }

  public includeTypename() {
    // @ts-ignore
    this.obj.__typename = 'SimpleExample';
    return this;
  }

  public get(): SchemaTypes.SimpleExample {
    return cloneDeep(this.obj) as SchemaTypes.SimpleExample;
  }
}

export function aSimpleExampleBuilder<O extends DeepPartial<SchemaTypes.SimpleExample> = {}>(baseObj?: O): SimpleExampleBuilder {
  return new SimpleExampleBuilder(baseObj ?? {});
}
"
`;

exports[`Builder Generator should generate builders for interfaces 1`] = `
"export * from './ScalarsBuilder';
export * from './SimpleExampleBuilder';
"
`;

exports[`Builder Generator should generate builders for interfaces 2`] = `
"/* eslint-disable */
import { DeepPartial } from 'ts-essentials';
import * as SchemaTypes from './simpleInterfaces';
import { cloneDeep } from 'lodash';

export class ScalarsBuilder {
  constructor(private readonly obj = {} as DeepPartial<SchemaTypes.Scalars>) {
  }

  public withID<P extends string>(val: P): ScalarsBuilder {
    this.obj.ID = val;
    return this;
  }

  public withString<P extends string>(val: P): ScalarsBuilder {
    this.obj.String = val;
    return this;
  }

  public withBoolean<P extends boolean>(val: P): ScalarsBuilder {
    this.obj.Boolean = val;
    return this;
  }

  public withInt<P extends number>(val: P): ScalarsBuilder {
    this.obj.Int = val;
    return this;
  }

  public withFloat<P extends number>(val: P): ScalarsBuilder {
    this.obj.Float = val;
    return this;
  }

  public withBigDecimal<P extends number>(val: P): ScalarsBuilder {
    this.obj.BigDecimal = val;
    return this;
  }

  public withJson<P extends any>(val: P): ScalarsBuilder {
    this.obj.Json = val;
    return this;
  }

  public withLong<P extends number>(val: P): ScalarsBuilder {
    this.obj.Long = val;
    return this;
  }

  public includeTypename() {
    // @ts-ignore
    this.obj.__typename = 'Scalars';
    return this;
  }

  public get(): SchemaTypes.Scalars {
    return cloneDeep(this.obj) as SchemaTypes.Scalars;
  }
}

export function aScalarsBuilder<O extends DeepPartial<SchemaTypes.Scalars> = {}>(baseObj?: O): ScalarsBuilder {
  return new ScalarsBuilder(baseObj ?? {});
}
"
`;

exports[`Builder Generator should generate builders for interfaces 3`] = `
"/* eslint-disable */
import { DeepPartial } from 'ts-essentials';
import * as SchemaTypes from './simpleInterfaces';
import { cloneDeep } from 'lodash';

export class SimpleExampleBuilder {
  constructor(private readonly obj = {} as DeepPartial<SchemaTypes.SimpleExample>) {
  }

  public withProp1<P extends boolean>(val: P): SimpleExampleBuilder {
    this.obj.prop1 = val;
    return this;
  }

  public withProp2<P extends number[]>(val: P): SimpleExampleBuilder {
    this.obj.prop2 = val;
    return this;
  }

  public withProp3<P extends DeepPartial<{ innerProp: string; }>>(val: P): SimpleExampleBuilder {
    this.obj.prop3 = val;
    return this;
  }

  public includeTypename() {
    // @ts-ignore
    this.obj.__typename = 'SimpleExample';
    return this;
  }

  public get(): SchemaTypes.SimpleExample {
    return cloneDeep(this.obj) as SchemaTypes.SimpleExample;
  }
}

export function aSimpleExampleBuilder<O extends DeepPartial<SchemaTypes.SimpleExample> = {}>(baseObj?: O): SimpleExampleBuilder {
  return new SimpleExampleBuilder(baseObj ?? {});
}
"
`;

exports[`Builder Generator should generate builders for interfaces 4`] = `
"export interface Scalars {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  BigDecimal: number;
  Json: any;
  Long: number;
}

export interface SimpleExample {
  prop1: Scalars['Boolean'];
  prop2: number[];
  prop3: {
    innerProp: string;
  };
}
"
`;

exports[`Builder Generator should generate builders for interfaces and types 1`] = `
"export * from './ScalarsBuilder';
export * from './NestedTypeExampleBuilder';
export * from './ArrayExampleBuilder';
export * from './SimpleExampleBuilder';
"
`;

exports[`Builder Generator should generate builders for interfaces and types 2`] = `
"/* eslint-disable */
import { DeepPartial } from 'ts-essentials';
import * as SchemaTypes from './simpleInterfacesAndTypes';
import { cloneDeep } from 'lodash';

export class ScalarsBuilder {
  constructor(private readonly obj = {} as DeepPartial<SchemaTypes.Scalars>) {
  }

  public withID<P extends string>(val: P): ScalarsBuilder {
    this.obj.ID = val;
    return this;
  }

  public withString<P extends string>(val: P): ScalarsBuilder {
    this.obj.String = val;
    return this;
  }

  public withBoolean<P extends boolean>(val: P): ScalarsBuilder {
    this.obj.Boolean = val;
    return this;
  }

  public withInt<P extends number>(val: P): ScalarsBuilder {
    this.obj.Int = val;
    return this;
  }

  public withFloat<P extends number>(val: P): ScalarsBuilder {
    this.obj.Float = val;
    return this;
  }

  public withBigDecimal<P extends number>(val: P): ScalarsBuilder {
    this.obj.BigDecimal = val;
    return this;
  }

  public withJson<P extends any>(val: P): ScalarsBuilder {
    this.obj.Json = val;
    return this;
  }

  public withLong<P extends number>(val: P): ScalarsBuilder {
    this.obj.Long = val;
    return this;
  }

  public includeTypename() {
    // @ts-ignore
    this.obj.__typename = 'Scalars';
    return this;
  }

  public get(): SchemaTypes.Scalars {
    return cloneDeep(this.obj) as SchemaTypes.Scalars;
  }
}

export function aScalarsBuilder<O extends DeepPartial<SchemaTypes.Scalars> = {}>(baseObj?: O): ScalarsBuilder {
  return new ScalarsBuilder(baseObj ?? {});
}
"
`;

exports[`Builder Generator should generate builders for interfaces and types 3`] = `
"/* eslint-disable */
import { DeepPartial } from 'ts-essentials';
import * as SchemaTypes from './simpleInterfacesAndTypes';
import { cloneDeep } from 'lodash';

export class SimpleExampleBuilder {
  constructor(private readonly obj = {} as DeepPartial<SchemaTypes.SimpleExample>) {
  }

  public withProp1<P extends boolean>(val: P): SimpleExampleBuilder {
    this.obj.prop1 = val;
    return this;
  }

  public withProp2<P extends number>(val: P): SimpleExampleBuilder {
    this.obj.prop2 = val;
    return this;
  }

  public withProp3<P extends DeepPartial<{ innerProp: string; }>>(val: P): SimpleExampleBuilder {
    this.obj.prop3 = val;
    return this;
  }

  public includeTypename() {
    // @ts-ignore
    this.obj.__typename = 'SimpleExample';
    return this;
  }

  public get(): SchemaTypes.SimpleExample {
    return cloneDeep(this.obj) as SchemaTypes.SimpleExample;
  }
}

export function aSimpleExampleBuilder<O extends DeepPartial<SchemaTypes.SimpleExample> = {}>(baseObj?: O): SimpleExampleBuilder {
  return new SimpleExampleBuilder(baseObj ?? {});
}
"
`;

exports[`Builder Generator should generate builders for interfaces and types 4`] = `
"export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  BigDecimal: number;
  Json: any;
  Long: number;
};

export interface SimpleExample {
  prop1: Scalars['Boolean'];
  prop2: number;
  prop3: {
    innerProp: string;
  };
}

export type NestedTypeExample = {
  nestedProp1: SimpleExample;
  nestedProp2: {
    simple: SimpleExample;
  };
  scalar1: Scalars;
};

export type ArrayExample = {
  arrProp: SimpleExample[];
};
"
`;

exports[`Builder Generator should generate builders for interfaces and types 5`] = `
"/* eslint-disable */
import { DeepPartial } from 'ts-essentials';
import * as SchemaTypes from './simpleInterfacesAndTypes';
import { cloneDeep } from 'lodash';

export class NestedTypeExampleBuilder {
  constructor(private readonly obj = {} as DeepPartial<SchemaTypes.NestedTypeExample>) {
  }

  public withNestedProp1<P extends DeepPartial<SchemaTypes.SimpleExample>>(val: P): NestedTypeExampleBuilder {
    this.obj.nestedProp1 = val;
    return this;
  }

  public withNestedProp2<P extends DeepPartial<{ simple: SchemaTypes.SimpleExample; }>>(val: P): NestedTypeExampleBuilder {
    this.obj.nestedProp2 = val;
    return this;
  }

  public withScalar1<P extends DeepPartial<SchemaTypes.Scalars>>(val: P): NestedTypeExampleBuilder {
    this.obj.scalar1 = val;
    return this;
  }

  public includeTypename() {
    // @ts-ignore
    this.obj.__typename = 'NestedTypeExample';
    return this;
  }

  public get(): SchemaTypes.NestedTypeExample {
    return cloneDeep(this.obj) as SchemaTypes.NestedTypeExample;
  }
}

export function aNestedTypeExampleBuilder<O extends DeepPartial<SchemaTypes.NestedTypeExample> = {}>(baseObj?: O): NestedTypeExampleBuilder {
  return new NestedTypeExampleBuilder(baseObj ?? {});
}
"
`;

exports[`Builder Generator should generate builders for interfaces and types 6`] = `
"/* eslint-disable */
import { DeepPartial } from 'ts-essentials';
import * as SchemaTypes from './simpleInterfacesAndTypes';
import { cloneDeep } from 'lodash';

export class ArrayExampleBuilder {
  constructor(private readonly obj = {} as DeepPartial<SchemaTypes.ArrayExample>) {
  }

  public withArrProp<P extends DeepPartial<SchemaTypes.SimpleExample>[]>(val: P): ArrayExampleBuilder {
    this.obj.arrProp = val;
    return this;
  }

  public includeTypename() {
    // @ts-ignore
    this.obj.__typename = 'ArrayExample';
    return this;
  }

  public get(): SchemaTypes.ArrayExample {
    return cloneDeep(this.obj) as SchemaTypes.ArrayExample;
  }
}

export function aArrayExampleBuilder<O extends DeepPartial<SchemaTypes.ArrayExample> = {}>(baseObj?: O): ArrayExampleBuilder {
  return new ArrayExampleBuilder(baseObj ?? {});
}
"
`;

exports[`Builder Generator should generate builders for types 1`] = `
"export * from './ScalarsBuilder';
export * from './SimpleExampleBuilder';
"
`;

exports[`Builder Generator should generate builders for types 2`] = `
"/* eslint-disable */
import { DeepPartial } from 'ts-essentials';
import * as SchemaTypes from './simpleTypes';
import { cloneDeep } from 'lodash';

export class ScalarsBuilder {
  constructor(private readonly obj = {} as DeepPartial<SchemaTypes.Scalars>) {
  }

  public withID<P extends string>(val: P): ScalarsBuilder {
    this.obj.ID = val;
    return this;
  }

  public withString<P extends string>(val: P): ScalarsBuilder {
    this.obj.String = val;
    return this;
  }

  public withBoolean<P extends boolean>(val: P): ScalarsBuilder {
    this.obj.Boolean = val;
    return this;
  }

  public withInt<P extends number>(val: P): ScalarsBuilder {
    this.obj.Int = val;
    return this;
  }

  public withFloat<P extends number>(val: P): ScalarsBuilder {
    this.obj.Float = val;
    return this;
  }

  public withBigDecimal<P extends number>(val: P): ScalarsBuilder {
    this.obj.BigDecimal = val;
    return this;
  }

  public withJson<P extends any>(val: P): ScalarsBuilder {
    this.obj.Json = val;
    return this;
  }

  public withLong<P extends number>(val: P): ScalarsBuilder {
    this.obj.Long = val;
    return this;
  }

  public includeTypename() {
    // @ts-ignore
    this.obj.__typename = 'Scalars';
    return this;
  }

  public get(): SchemaTypes.Scalars {
    return cloneDeep(this.obj) as SchemaTypes.Scalars;
  }
}

export function aScalarsBuilder<O extends DeepPartial<SchemaTypes.Scalars> = {}>(baseObj?: O): ScalarsBuilder {
  return new ScalarsBuilder(baseObj ?? {});
}
"
`;

exports[`Builder Generator should generate builders for types 3`] = `
"/* eslint-disable */
import { DeepPartial } from 'ts-essentials';
import * as SchemaTypes from './simpleTypes';
import { cloneDeep } from 'lodash';

export class SimpleExampleBuilder {
  constructor(private readonly obj = {} as DeepPartial<SchemaTypes.SimpleExample>) {
  }

  public withProp1<P extends boolean>(val: P): SimpleExampleBuilder {
    this.obj.prop1 = val;
    return this;
  }

  public withProp2<P extends number>(val: P): SimpleExampleBuilder {
    this.obj.prop2 = val;
    return this;
  }

  public withProp3<P extends DeepPartial<{ innerProp: string; }>>(val: P): SimpleExampleBuilder {
    this.obj.prop3 = val;
    return this;
  }

  public includeTypename() {
    // @ts-ignore
    this.obj.__typename = 'SimpleExample';
    return this;
  }

  public get(): SchemaTypes.SimpleExample {
    return cloneDeep(this.obj) as SchemaTypes.SimpleExample;
  }
}

export function aSimpleExampleBuilder<O extends DeepPartial<SchemaTypes.SimpleExample> = {}>(baseObj?: O): SimpleExampleBuilder {
  return new SimpleExampleBuilder(baseObj ?? {});
}
"
`;

exports[`Builder Generator should generate builders for types 4`] = `
"export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  BigDecimal: number;
  Json: any;
  Long: number;
};

export type SimpleExample = {
  prop1: Scalars['Boolean'];
  prop2: number;
  prop3: {
    innerProp: string;
  };
};
"
`;

exports[`Builder Generator should generate builders for types with __typename property 1`] = `
"export * from './SimpleExampleBuilder';
"
`;

exports[`Builder Generator should generate builders for types with __typename property 2`] = `
"/* eslint-disable */
import { DeepPartial } from 'ts-essentials';
import * as SchemaTypes from './ignoreTypenameProp';
import { cloneDeep } from 'lodash';

export class SimpleExampleBuilder {
  constructor(private readonly obj = {} as DeepPartial<SchemaTypes.SimpleExample>) {
  }

  public withProp1<P extends boolean>(val: P): SimpleExampleBuilder {
    this.obj.prop1 = val;
    return this;
  }

  public withProp2<P extends number>(val: P): SimpleExampleBuilder {
    this.obj.prop2 = val;
    return this;
  }

  public withProp3<P extends DeepPartial<{ innerProp: string; }>>(val: P): SimpleExampleBuilder {
    this.obj.prop3 = val;
    return this;
  }

  public includeTypename() {
    // @ts-ignore
    this.obj.__typename = 'SimpleExample';
    return this;
  }

  public get(): SchemaTypes.SimpleExample {
    return cloneDeep(this.obj) as SchemaTypes.SimpleExample;
  }
}

export function aSimpleExampleBuilder<O extends DeepPartial<SchemaTypes.SimpleExample> = {}>(baseObj?: O): SimpleExampleBuilder {
  return new SimpleExampleBuilder(baseObj ?? {});
}
"
`;

exports[`Builder Generator should generate builders for union type 1`] = `
"export * from './SimpleExampleBuilder';
"
`;

exports[`Builder Generator should generate builders for union type 2`] = `
"/* eslint-disable */
import { DeepPartial } from 'ts-essentials';
import * as SchemaTypes from './ignoreUnionTypes';
import { cloneDeep } from 'lodash';

export class SimpleExampleBuilder {
  constructor(private readonly obj = {} as DeepPartial<SchemaTypes.SimpleExample>) {
  }

  public withProp1<P extends boolean>(val: P): SimpleExampleBuilder {
    this.obj.prop1 = val;
    return this;
  }

  public withProp2<P extends number>(val: P): SimpleExampleBuilder {
    this.obj.prop2 = val;
    return this;
  }

  public withProp3<P extends DeepPartial<{ innerProp: string; }>>(val: P): SimpleExampleBuilder {
    this.obj.prop3 = val;
    return this;
  }

  public includeTypename() {
    // @ts-ignore
    this.obj.__typename = 'SimpleExample';
    return this;
  }

  public get(): SchemaTypes.SimpleExample {
    return cloneDeep(this.obj) as SchemaTypes.SimpleExample;
  }
}

export function aSimpleExampleBuilder<O extends DeepPartial<SchemaTypes.SimpleExample> = {}>(baseObj?: O): SimpleExampleBuilder {
  return new SimpleExampleBuilder(baseObj ?? {});
}
"
`;

exports[`Builder Generator should generate builders with null initializer 1`] = `
"export * from './ScalarsBuilder';
export * from './NestedTypeExampleBuilder';
export * from './ArrayExampleBuilder';
export * from './SimpleExampleBuilder';
"
`;

exports[`Builder Generator should generate builders with null initializer 2`] = `
"/* eslint-disable */
import { DeepPartial } from 'ts-essentials';
import * as SchemaTypes from './simpleInterfacesAndTypes';
import { cloneDeep } from 'lodash';

export class ScalarsBuilder {
  constructor(private readonly obj = {ID: null, String: null, Boolean: null, Int: null, Float: null, BigDecimal: null, Json: null, Long: null} as DeepPartial<SchemaTypes.Scalars>) {
  }

  public withID<P extends string>(val: P): ScalarsBuilder {
    this.obj.ID = val;
    return this;
  }

  public withString<P extends string>(val: P): ScalarsBuilder {
    this.obj.String = val;
    return this;
  }

  public withBoolean<P extends boolean>(val: P): ScalarsBuilder {
    this.obj.Boolean = val;
    return this;
  }

  public withInt<P extends number>(val: P): ScalarsBuilder {
    this.obj.Int = val;
    return this;
  }

  public withFloat<P extends number>(val: P): ScalarsBuilder {
    this.obj.Float = val;
    return this;
  }

  public withBigDecimal<P extends number>(val: P): ScalarsBuilder {
    this.obj.BigDecimal = val;
    return this;
  }

  public withJson<P extends any>(val: P): ScalarsBuilder {
    this.obj.Json = val;
    return this;
  }

  public withLong<P extends number>(val: P): ScalarsBuilder {
    this.obj.Long = val;
    return this;
  }

  public includeTypename() {
    // @ts-ignore
    this.obj.__typename = 'Scalars';
    return this;
  }

  public get(): SchemaTypes.Scalars {
    return cloneDeep(this.obj) as SchemaTypes.Scalars;
  }
}

export function aScalarsBuilder<O extends DeepPartial<SchemaTypes.Scalars> = {}>(baseObj?: O): ScalarsBuilder {
  return new ScalarsBuilder(baseObj ?? {});
}
"
`;

exports[`Builder Generator should generate builders with null initializer 3`] = `
"/* eslint-disable */
import { DeepPartial } from 'ts-essentials';
import * as SchemaTypes from './simpleInterfacesAndTypes';
import { cloneDeep } from 'lodash';

export class SimpleExampleBuilder {
  constructor(private readonly obj = {prop1: null, prop2: null, prop3: null} as DeepPartial<SchemaTypes.SimpleExample>) {
  }

  public withProp1<P extends boolean>(val: P): SimpleExampleBuilder {
    this.obj.prop1 = val;
    return this;
  }

  public withProp2<P extends number>(val: P): SimpleExampleBuilder {
    this.obj.prop2 = val;
    return this;
  }

  public withProp3<P extends DeepPartial<{ innerProp: string; }>>(val: P): SimpleExampleBuilder {
    this.obj.prop3 = val;
    return this;
  }

  public includeTypename() {
    // @ts-ignore
    this.obj.__typename = 'SimpleExample';
    return this;
  }

  public get(): SchemaTypes.SimpleExample {
    return cloneDeep(this.obj) as SchemaTypes.SimpleExample;
  }
}

export function aSimpleExampleBuilder<O extends DeepPartial<SchemaTypes.SimpleExample> = {}>(baseObj?: O): SimpleExampleBuilder {
  return new SimpleExampleBuilder(baseObj ?? {});
}
"
`;

exports[`Builder Generator should generate builders with null initializer 4`] = `
"export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  BigDecimal: number;
  Json: any;
  Long: number;
};

export interface SimpleExample {
  prop1: Scalars['Boolean'];
  prop2: number;
  prop3: {
    innerProp: string;
  };
}

export type NestedTypeExample = {
  nestedProp1: SimpleExample;
  nestedProp2: {
    simple: SimpleExample;
  };
  scalar1: Scalars;
};

export type ArrayExample = {
  arrProp: SimpleExample[];
};
"
`;

exports[`Builder Generator should generate builders with null initializer 5`] = `
"/* eslint-disable */
import { DeepPartial } from 'ts-essentials';
import * as SchemaTypes from './simpleInterfacesAndTypes';
import { cloneDeep } from 'lodash';

export class NestedTypeExampleBuilder {
  constructor(private readonly obj = {nestedProp1: null, nestedProp2: null, scalar1: null} as DeepPartial<SchemaTypes.NestedTypeExample>) {
  }

  public withNestedProp1<P extends DeepPartial<SchemaTypes.SimpleExample>>(val: P): NestedTypeExampleBuilder {
    this.obj.nestedProp1 = val;
    return this;
  }

  public withNestedProp2<P extends DeepPartial<{ simple: SchemaTypes.SimpleExample; }>>(val: P): NestedTypeExampleBuilder {
    this.obj.nestedProp2 = val;
    return this;
  }

  public withScalar1<P extends DeepPartial<SchemaTypes.Scalars>>(val: P): NestedTypeExampleBuilder {
    this.obj.scalar1 = val;
    return this;
  }

  public includeTypename() {
    // @ts-ignore
    this.obj.__typename = 'NestedTypeExample';
    return this;
  }

  public get(): SchemaTypes.NestedTypeExample {
    return cloneDeep(this.obj) as SchemaTypes.NestedTypeExample;
  }
}

export function aNestedTypeExampleBuilder<O extends DeepPartial<SchemaTypes.NestedTypeExample> = {}>(baseObj?: O): NestedTypeExampleBuilder {
  return new NestedTypeExampleBuilder(baseObj ?? {});
}
"
`;

exports[`Builder Generator should generate builders with null initializer 6`] = `
"/* eslint-disable */
import { DeepPartial } from 'ts-essentials';
import * as SchemaTypes from './simpleInterfacesAndTypes';
import { cloneDeep } from 'lodash';

export class ArrayExampleBuilder {
  constructor(private readonly obj = {arrProp: null} as DeepPartial<SchemaTypes.ArrayExample>) {
  }

  public withArrProp<P extends DeepPartial<SchemaTypes.SimpleExample>[]>(val: P): ArrayExampleBuilder {
    this.obj.arrProp = val;
    return this;
  }

  public includeTypename() {
    // @ts-ignore
    this.obj.__typename = 'ArrayExample';
    return this;
  }

  public get(): SchemaTypes.ArrayExample {
    return cloneDeep(this.obj) as SchemaTypes.ArrayExample;
  }
}

export function aArrayExampleBuilder<O extends DeepPartial<SchemaTypes.ArrayExample> = {}>(baseObj?: O): ArrayExampleBuilder {
  return new ArrayExampleBuilder(baseObj ?? {});
}
"
`;
